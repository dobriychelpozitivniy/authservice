// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "mailer-auth/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockPasswordManager) Check(password, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", password, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockPasswordManagerMockRecorder) Check(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPasswordManager)(nil).Check), password, hash)
}

// Hash mocks base method.
func (m *MockPasswordManager) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPasswordManagerMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPasswordManager)(nil).Hash), password)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(username, hash string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, hash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(username, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), username, hash)
}

// GetUser mocks base method.
func (m *MockUser) GetUser(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUser)(nil).GetUser), username)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenManager) GenerateAccessToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenManagerMockRecorder) GenerateAccessToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenManager)(nil).GenerateAccessToken), userID)
}

// GenerateRefreshToken mocks base method.
func (m *MockTokenManager) GenerateRefreshToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockTokenManagerMockRecorder) GenerateRefreshToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockTokenManager)(nil).GenerateRefreshToken), userID)
}

// ParseAccessToken mocks base method.
func (m *MockTokenManager) ParseAccessToken(AccessTokenClaims string) (*models.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", AccessTokenClaims)
	ret0, _ := ret[0].(*models.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockTokenManagerMockRecorder) ParseAccessToken(AccessTokenClaims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockTokenManager)(nil).ParseAccessToken), AccessTokenClaims)
}

// ParseRefreshToken mocks base method.
func (m *MockTokenManager) ParseRefreshToken(RefreshToken string) (*models.RefreshTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", RefreshToken)
	ret0, _ := ret[0].(*models.RefreshTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MockTokenManagerMockRecorder) ParseRefreshToken(RefreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MockTokenManager)(nil).ParseRefreshToken), RefreshToken)
}
